{
"homepage": "http://ada.is",
"name": "Ada.is",
"description": "The blog of Ada-Rose Edwards",
"author": "Ada Rose Edwards",
"posts": [
{
"url": "http://ada.is/blog/2014/05/22/fruitmachine/",
"slug": "blog20140522fruitmachine",
"title": "Introduction to fruitmachine",
"published_on": "2014-05-22 00:00:00 +0100",
"excerpt": "Project Goals:Implement fruitmachine on server and client using node.Support server rendered pages.Use as a basis for fruitmachine helper development.Work on a web component helperTo get me started I am using yeoman&#39;s Gulp webapp generator to give me a whole bunch of scaffolding. (Lazy Ada)install -g generator-gulp-webappyoThe first step is to set up fruitmachine. Fruitmachine can...",
"content": "<h3>Project Goals:</h3>\n\n<p>Implement fruitmachine on server and client using node.</p>\n\n<ul>\n<li>Support server rendered pages.</li>\n<li>Use as a basis for fruitmachine helper development.</li>\n<li>Work on a web component helper</li>\n</ul>\n\n<p>To get me started I am using yeoman&#39;s Gulp webapp generator to give me a whole bunch of scaffolding. (Lazy Ada)</p>\n<div class=\"highlight\"><pre><code class=\"text language-text\" data-lang=\"text\">install -g generator-gulp-webapp\nyo\n</code></pre></div>\n<p>The first step is to set up fruitmachine. Fruitmachine can use many different templating engines, I went with hogan because it&#39;s the one I like. </p>\n\n<p>For a fruitmachine module you are required to define a template and a define the module in the fruitmachine engine.</p>\n<div class=\"highlight\"><pre><code class=\"text language-text\" data-lang=\"text\">var fruitmachine = require(&#39;fruitmachine&#39;);\nvar templates = require(&#39;../templates&#39;);\n\nfruitmachine.define({\n    name: &#39;banana&#39;,\n    template: templates.banana\n});\n</code></pre></div>\n<p>Fruitmachine is extremely flexible in that it&#39;s possible to have many different configurations depending on your needs. I went with a setup in which all of the components for the fruit were kept together.</p>\n\n<p>My gulp configuration then parses this folder tree and generates 3 resources:</p>\n\n<ol>\n<li>A commonjs precompiled hogan template. </li>\n<li>A single include which requires all of the fruit definitions. i.e. require(&#39;./banana&#39;)</li>\n<li>A scss file which @imports all of the stylesheets for each module. i.e. @import &quot;melon/style&quot;;</li>\n</ol>\n\n<p>This folder structure can be seen <a href=\"https://github.com/AdaRoseEdwards/ft-ada/tree/master/app/fruit/melon\">[here]</a></p>\n\n<blockquote>\n<p>A note on scss imports an eagle eyed reader would notice that automatic import of entire folders in scss is bad practise due to import order. BUT each module is namespaced so that import order no longer matters. </p>\n</blockquote>\n\n<p>I through together <code>gulp-import-gen.js</code> to be used as a gulp plugin to generate these import files. It&#39;s not neatest solution but it works. This was primarily so I could avoid having to update 3 files everythime I create a new fruit module.</p>\n\n<p>I also added browserify and tweaked gulp watch to watch the new directory tree and gulp gh deploy to deploy github pages.</p>\n\n<p>You can view the end result at <a href=\"http://ada.is/ft-ada\">[http://ada.is/ft-ada]</a></p>\n\n<p>To do: compile these folders into webcomponents so that the dom looks really lovely and pretty.</p>\n",
"tags": "",
"categories": "blog"
},
{
"url": "http://ada.is/blog/2014/03/24/web-experiments/",
"slug": "blog20140324web-experiments",
"title": "Experiments in web tech",
"published_on": "2014-03-24 00:00:00 +0000",
"excerpt": "Status: Draft - Please comment and I will elaborate.This project has been cancelled. After some work I realised I wasreimplemeting ftlabs&#39;s fruitmachine. The next post will be an introduction to fruitmachine and some useful helpers.I will look into creating a web-component fruitmachine helper. This project explores progressive enhancement, web components, spdy and a few other...",
"content": "<h5>Status: Draft - Please comment and I will elaborate.</h5>\n\n<p>This project has been cancelled. After some work I realised I was\nreimplemeting ftlabs&#39;s fruitmachine\n. The next post will be an introduction to fruitmachine and some useful helpers.\nI will look into creating a web-component fruitmachine helper. </p>\n\n<p>This project explores progressive enhancement, web components, spdy and a few other bits and bobs.</p>\n\n<p><a href=\"https://github.com/AdaRoseEdwards/spdyproject\">[LINK]</a></p>\n\n<p>Key goals of this project:</p>\n\n<ul>\n<li>Fast initial load, slow start -&gt; low conversion - complete</li>\n<li>Progressive enhancement - incomplete 80%?</li>\n<li>Accessibilty (Aria support especially) - not begun</li>\n<li>Dabble with moongoose and a few other bits and bobs.</li>\n</ul>\n\n<h3>Progressive Enhancement</h3>\n\n<p>Initial load is just normal html and css. Images and fonts are pushed by spdy with the css so that their are fewer requests before the page can render.</p>\n\n<p>At this point the website should work fully, using forms and normal html4.0</p>\n\n<p>Javascript is then run to bind to buttons for a pleasant interface experience</p>\n\n<p>The polymer platform and compiled hogan templates are used to generate web components.</p>\n\n<h3>Use of web components and hogan</h3>\n\n<p>The Hogan templates are written such that is compiled with a usePolymer flag will generate neat and lovely dom using web components.</p>\n\n<p>Using hulk these templates are compiled to a javascript file which is included in the client side javascript via commonjs. </p>\n\n<p>In <a href=\"https://github.com/AdaRoseEdwards/spdyproject/tree/master/app/javascript/modules/components\">components</a> these templates are turned into web components and javascript is bound to them.</p>\n\n<p>From then on any dom recieved from the server can be requested as web components or they can be rendered straight from the hogan files with data from the servers rest api.</p>\n\n<p>This has the nice result that all the components can be shared between the client and server with no template duplication and DOM can be rendered on client or server as either standard DOM or as WebComponents depending on the platform. </p>\n\n<h3>Spdy</h3>\n\n<p>There is not much to say about spdy, using the existing modules it is easy to use and the code should be pretty self explanitory. What is quite interesting though is the path the route takes in express.</p>\n\n<p><a href=\"https://github.com/AdaRoseEdwards/spdyproject/tree/master/app.js\">app.js</a></p>\n\n<ul>\n<li>Sets up server</li>\n</ul>\n\n<p><a href=\"https://github.com/AdaRoseEdwards/spdyproject/tree/master/lib/server/index.js\">./lib/server</a></p>\n\n<ul>\n<li>Route through the app</li>\n<li>Set up static routes</li>\n</ul>\n\n<p><a href=\"https://github.com/AdaRoseEdwards/spdyproject/tree/master/lib/server/templateData.js\">./lib/server/templateData.js</a></p>\n\n<ul>\n<li>Set the render function to handle returning either html or json</li>\n<li>Set cache control headers</li>\n<li>Set the template variables and add the rendering functions</li>\n<li>Handle spdy pushing</li>\n<li>Handle forcing of JSON or webcomponents,\n\n<ul>\n<li>A cookie of JSON=1 will return all template data as JSON useful for debugging.</li>\n<li>A cookie of polymer=1 will always render web component templates and will load the polymer platform and generate web components in a blocking fashion, useful for experimenting with polymer.</li>\n</ul></li>\n</ul>\n\n<p><a href=\"https://github.com/AdaRoseEdwards/spdyproject/tree/master/lib/rest/index.js\">./lib/rest</a></p>\n\n<ul>\n<li>rest api functionality these get loaded dynamically by parsing the requested url</li>\n</ul>\n\n<p><a href=\"https://github.com/AdaRoseEdwards/spdyproject/tree/master/lib/server/defaultHandler.js\">./lib/server/defaultHandler</a></p>\n\n<ul>\n<li>Handle dynamic routes, load pages from routes in a similar fashion to the way rest loads.</li>\n</ul>\n\n<h3>Todo</h3>\n\n<ul>\n<li>A11y - Add aria to views - Enhance design</li>\n<li>Service worker - use the polyfill for now. Have this as a progressive enhancement.</li>\n<li>Clean up code finish writing components for basic functionality.</li>\n</ul>\n",
"tags": "",
"categories": "blog"
},
{
"url": "http://ada.is/blog/2014/03/02/first-post/",
"slug": "blog20140302first-post",
"title": "Where it all begins...",
"published_on": "2014-03-02 00:00:00 +0000",
"excerpt": "(Skip this post to avoid self obsessed ramblings)A new beginning again...I have had many new beginnings, another is just beginning,each new beginning I start a blog which I don&#39;t really do muchwith, I won&#39;t make any apologies for this. Here I&#39;ll post somecoding stuff but I mostly want to cover...My move to San Francisco.I am...",
"content": "<p>(Skip this post to avoid self obsessed ramblings)</p>\n\n<h1>A new beginning again...</h1>\n\n<p>I have had many new beginnings, another is just beginning,\neach new beginning I start a blog which I don&#39;t really do much\nwith, I won&#39;t make any apologies for this. Here I&#39;ll post some\ncoding stuff but I mostly want to cover...</p>\n\n<h4>My move to San Francisco.</h4>\n\n<p>I am moving to San Francisco for love. I am currently applying for my visa, if\nall goes well I am due to move in April. I am very fortunate for the Financial\nTimes to aid in my relocation. In order help me work remotely I will be keeping\nregular work journals to help me give more detailed weekly reports.</p>\n\n<p>I figure a journal like this could also be very helpful eith my home projecs so\nI shall jot down notes from projects I am working on. The foremost of which will\nbe this site. A friend of mine has been kind enough to design the site for me.\n(I can&#39;t design for toffee.) </p>\n\n<p>I can&#39;t guarantee this will be kept amazingly upto date but I will try my best.</p>\n",
"tags": "",
"categories": "blog"
},
{}
]
}